#!/usr/local/bin/perl

##########################################################
##                  YAO HUANG HW1-A(1)
##    INFORMATION RETRIEVAL AND WEB AGENTS (600.466)
##    Solution 1: This part is to show the arff file 
##    generator. 
##
##    yaohuang_hw1a_weka.prl < sent.data.train | more
##
##  Suggestion: run in a wide window
##########################################################


$L="./classes";

&initialize_set(*abbrevs,"$L/abbrevs"); 
&initialize_set(*titles,"$L/titles"); 
&initialize_set(*unlikely_proper_nouns,"$L/unlikely_proper_nouns"); 
&initialize_set(*timeterms,"$L/timeterms");
&initialize_set(*special,"$L/special");
&initialize_set(*date,"$L/date"); 
&initialize_set(*shorts,"$L/shorts");  

# show the result to another arff file.
open(MYFILE, '>>weka_data.txt.arff');

##########################################################

## The following are the rules that will be justified 
## through the process. All the rules are boolean value
## that are showing whether or not the rule will be used.

##########################################################

print MYFILE "\@relation 'yao' \n";
print MYFILE "\@attribute r1Lowercase {0,1}  \n";
print MYFILE "\@attribute r2Paragraph {0,1}  \n";
print MYFILE "\@attribute r3R1CommaPeriod {0,1}  \n";
print MYFILE "\@attribute r4Default {0,1}  \n";
print MYFILE "\@attribute r5Title {0,1}  \n";
print MYFILE "\@attribute r6Middlename {0,1}  \n";
print MYFILE "\@attribute r7L2commaPeriod {0,1}  \n";
print MYFILE "\@attribute r8RightAbbrev {0,1}  \n";
print MYFILE "\@attribute r9L1Specified {0,1}  \n";
print MYFILE "\@attribute r10R1Specified {0,1}  \n";
print MYFILE "\@attribute r11Date {0,1}  \n";
print MYFILE "\@attribute r12Shorts {0,1}  \n";
print MYFILE "\@attribute r13LeftAbbrev {0,1}  \n";
print MYFILE "\@attribute r14PeriodInParenthesis {0,1}  \n";
print MYFILE "\@attribute r15R1IsUnited {0,1}  \n";
print MYFILE "\@attribute r16R1R2Capital {0,1}  \n";
print MYFILE "\@attribute r171IsNumber {0,1} \n";
print MYFILE "\@attribute class {NEOS,EOS} \n";
print MYFILE "\@data \n";


while (<>) {
   @words = split(' ',$_);
   ($class,$id,$L3,$L2,$L1,$C,$R1,$R2,$R3,$Llength,$Rlength,$Nspaces) = @words;

   # Showing the arff result in order with the relative rules.
   # Initialize all the rules that are not used at first.
   @arff_row = (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,$class);
 
   if ($R1 =~ /^[a-z]/) {
      $arff_row[0] = 1;
      print MYFILE join( ',', @arff_row), "\n";} # +1 is lower case
   elsif ($R1 eq "<P>") {
      $arff_row[1] = 1;
      print MYFILE join( ',', @arff_row), "\n";}  # +1 is new paragraph
   elsif ($R1 =~ /^[,.;]/) {
      $arff_row[2] = 1;
      print MYFILE join( ',', @arff_row), "\n";} # +1 is comma, period, semicolon
   elsif (&classmember($R1,special)) {
      $arff_row[9] = 1;
      print MYFILE join( ',', @arff_row), "\n";} # Specified start of the sentence
   elsif (&classmember($R1,date)) {
      $arff_row[10] = 1;
      print MYFILE join( ',', @arff_row), "\n";} #date
   elsif (&classmember($L1,shorts)) {
      $arff_row[11] = 1;
      print MYFILE join( ',', @arff_row), "\n";} #shorts
   elsif ($L1 =~ /^[A-Z][.]+/) {
      $arff_row[12] = 1;
      print MYFILE join( ',', @arff_row), "\n";} #left abbreviation
   elsif (($L1 =~ /^[A-Z]$/) && ($R1 =~ /^[^A-Z]/)) {
      $arff_row[15] = 1;
      print MYFILE join( ',', @arff_row), "\n";} #L1,R1 Capital
   elsif ($L1 =~ /^[a-z][.]+/) {
      $arff_row[12] = 1;
      print MYFILE join( ',', @arff_row), "\n";} #left abbreviation
   elsif ($L2 =~ /^[(]/) {
      $arff_row[13] = 1;
      print MYFILE join( ',', @arff_row), "\n";} # period in parenthesis
   elsif ($R1 eq "United") {
      $arff_row[14] = 1;
      print MYFILE join( ',', @arff_row), "\n";} # R1 is United
   elsif ($R1 =~ /^[A-Z]/) {                             # +1 is capitalized 
      if (&classmember($L1,titles)) {
        $arff_row[4] = 1;
        print MYFILE join( ',', @arff_row), "\n";}  # Mr. Mrs.
      elsif ($L1 =~ /^[A-Z]$/) {
        if ($L2 =~ /^[A-Z]/) {
          $arff_row[5] = 1;
          print MYFILE join( ',', @arff_row), "\n";} # middle name
        elsif ($L2 =~ /^[.]/) {
          $arff_row[6] = 1;
          print MYFILE join( ',', @arff_row), "\n";} # L2 is comma, period
        elsif ($R2 =~ /^[.]/) {
          $arff_row[7] = 1;
          print MYFILE join( ',', @arff_row), "\n";} # right abbreviation
      }
      else {
          $arff_row[3] = 1;
          print MYFILE join( ',', @arff_row), "\n";} # default
    }
   elsif ($R1 =~ /^[0-9]/) {
        if ($L1 =~ /^[A-Z]/) {
          $arff_row[8] = 1;
          print MYFILE join( ',', @arff_row), "\n";} # Specified number.
        elsif ($L1 eq "no") {
          $arff_row[8] = 1;
          print MYFILE join( ',', @arff_row), "\n";} # Specified number.
        elsif ($L1 =~ /^[a-z]/) {
          $arff_row[8] = 1;
          print MYFILE join( ',', @arff_row), "\n";} # Specified number. 
   }   
   else {
          $arff_row[16] = 1;
          print MYFILE join( ',', @arff_row), "\n";} # +1 is number, etc. 
}

close (MYFILE);
 
##########################################################
## RET - prints full line for errors and keeps score
##     - $where indicates the rule number responsible for the classification
##
##  This is a useful debugging tool, as after each change in
##  the program one can identify the remaining misclassified
##  training examples and the patterns responsible for them. 
##########################################################
 
sub ret {
   local($where,$trueclass,$id,$givenclass) = @_;
   
   if ($trueclass eq $givenclass) {
      # print ".. (at ",$where,") -  ", $_;
      $correct++; 
   }
   else {
      # print "XX (at ",$where,") -  ", $_;
      # print OUTFILE ("XX (at ",$where," shoud be ", $trueclass , ") -  ", $_);
      $incorrect++;
   }
   next;
}

##########################################################
## CLASSMEMBER - tests for membership of $key in a given set
##
##  The \L in $set{"\L$key"} is a perl hack to convert a
##  string into all lower case for lookup in a word array
##  insensitive to the capitalization of the original key.
##########################################################

sub classmember{
   local($key,*set) = @_;

   return $set{"\L$key"};
}

##########################################################
## INITIALIZE_SET - loads named associative array with set members   
##########################################################

sub initialize_set{
   local(*set,$where) = @_;
   
    open (FILE,$where) || die "Can't open file $where: $!\n";

    while (<FILE>) {
        chop;
        $set{$_} = 1;
    }
    close (FILE);
}


